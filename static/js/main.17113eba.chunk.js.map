{"version":3,"sources":["Components/Header.js","Store/Actions/ActionTypes.js","Components/NavigationBar.js","Components/InputAreaByDataTypes/StringInput.js","Components/InputAreaByDataTypes/VectorInput.js","Components/InputAreaByDataTypes/TreeInput.js","Components/InputAreaByDataTypes/GraphInput.js","Components/InputArea.js","Components/OutputArea.js","Components/Footer.js","Store/Actions/VectorActions.js","Components/ButtonUtil.js","Store/Actions/StringActions.js","App.js","serviceWorker.js","Theme/index.js","Middleware/Logger.js","Store/Reducers/StringReducer.js","Store/Reducers/VectorReducer.js","Store/Reducers/index.js","index.js"],"names":["useStyles","makeStyles","theme","drawer","width","appBar","background","grey","color","toolbar","paddingLeft","menuButton","marginRight","spacing","breakpoints","up","display","placeholder","down","minHeight","drawerPaper","content","flexGrow","padding","Header","dispatch","useDispatch","open","useSelector","state","rootReducer","classes","useState","mode","setMode","Container","AppBar","position","className","Toolbar","Box","Tooltip","title","IconButton","aria-label","onClick","type","HighlightOff","Menu","Button","Typography","component","noWrap","placement","arrow","console","log","Palette","href","Settings","GitHub","list","paddingTop","items","id","NavigationBar","React","value","setValue","Card","raised","CardContent","List","map","item","FormControl","key","RadioGroup","onChange","e","target","payload","ListItem","ListItemIcon","FormControlLabel","checked","control","Radio","label","ListItemText","primary","text","line","paddingBottom","radiogroup","marginLeft","predefinedCharset","StringInput","customCharset","setCustomCharset","useDelimiter","setUseDelimiter","allowDuplicate","setAllowDuplicate","radioDisabled","setRadio","Grid","container","direction","row","disabled","Switch","name","TextField","autoFocus","fullWidth","dense","variant","v","height","marginBottom","charSettingBox","marginTop","backgroundColor","indigo","VectorInput","typeChecked","VectorReducer","stringChecked","setStringChecked","intChecked","setIntChecked","floatChecked","setFloatChecked","charValue","setCharValue","error","setError","helperText","setHelperText","charsetOptions","optionDisabled","alignItems","FormGroup","Checkbox","int","float","option","margin","trim","lowerBound","parseFloat","split","upperBound","re","test","checkValidRange","TreeInput","GraphInput","inputBox","card","paddingRight","minWidth","InputArea","dataType","fixed","disableGutters","outputBox","button","OutputArea","enqueueSnackbar","useSnackbar","output","multiline","rows","navigator","clipboard","writeText","palette","footer","Footer","style","red","A400","genStringInt","arr","Math","floor","random","length","genFloat","floatRange","ButtonUtil","allState","StartGenerator","chars","numChars","delimiter","numCases","result","i","j","count","min","idx","splice","startStringGen","numElem","string","l","startVectorGen","xs","sm","App","maxSnack","Boolean","window","location","hostname","match","globalStyles","withStyles","a","main","textDecoration","blockquote","borderLeft","code","inlineCode","img","maxWidth","CustomCssEl","propTypes","PropTypes","object","isRequired","CustomCssBaseline","lightTheme","createMuiTheme","details","border","blue","search","messageBackground","highlight","tab","colorOnHover","subTitle","overrides","MuiCssBaseline","filter","transition","transitionTimingFunction","logger","store","next","action","group","info","getState","groupEnd","initState","StringReducer","vector","combineReducers","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","applyMiddleware","loggerMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","unsubscribe","subscribe","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.17113eba.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport { Container, Typography, AppBar, Box, Toolbar, IconButton,\r\n    Button, Tooltip } from '@material-ui/core'\r\nimport { Settings, GitHub, Menu, HighlightOff, Palette } from '@material-ui/icons'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport { grey } from '@material-ui/core/colors'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { OPEN_DRAWER,CLOSE_DRAWER } from '../Store/Actions/ActionTypes'\r\n\r\nconst drawerWidth = 250\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    drawer: {\r\n      width: drawerWidth,\r\n    },\r\n    // hiddenDrawer: {\r\n    //   [theme.breakpoints.down('md')]: {\r\n    //     display: 'none',\r\n    //   },\r\n    // },\r\n    appBar: {\r\n      background: grey[50],\r\n      color: grey[700]\r\n    },\r\n    toolbar: {\r\n      paddingLeft: '7.5px',\r\n    },\r\n    menuButton: {\r\n      marginRight: theme.spacing(2),\r\n      [theme.breakpoints.up('lg')]: {\r\n        display: 'none',\r\n      },\r\n    },\r\n    // necessary for content to be below app bar\r\n    placeholder: {\r\n      [theme.breakpoints.down('md')]: {\r\n        minHeight: 64,\r\n      },\r\n      minHeight: 48 + 64,\r\n      alignItems: 'flex-start',\r\n    },\r\n    drawerPaper: {\r\n      width: drawerWidth,\r\n    },\r\n    content: {\r\n      flexGrow: 1,\r\n      padding: theme.spacing(3),\r\n    },\r\n  }))\r\n\r\nconst Header = () => {\r\n    const dispatch = useDispatch();\r\n    const open = useSelector(state => state.rootReducer.open)\r\n    const classes = useStyles()\r\n    const OIWikiGithub = 'https://github.com/OI-wiki/test-data-generator'\r\n\r\n    const [mode, setMode] = useState('light')\r\n    const changeMode = () => {\r\n        if (mode === 'light')\r\n          setMode('dark')\r\n        else\r\n          setMode('light')\r\n        console.log('switched MODE to', mode)\r\n    }\r\n\r\n    return(\r\n        <Container>\r\n            <AppBar position=\"fixed\" className={classes.appBar}>\r\n                <Toolbar className={classes.toolbar}>\r\n                    {/* Left half */}\r\n                    <Box\r\n                      display=\"flex\"\r\n                      flexGrow={1}\r\n                    >\r\n                      { \r\n                        open ?\r\n                              <Tooltip title=\"关闭菜单\">\r\n                                    <IconButton\r\n                                    // color=\"inherit\"\r\n                                    aria-label=\"close drawer\"\r\n                                    onClick={()=>dispatch({type:CLOSE_DRAWER})}\r\n                                    className={classes.menuButton}\r\n                                >\r\n                                    <HighlightOff />\r\n                                </IconButton>\r\n                              </Tooltip>\r\n                             :\r\n                              <Tooltip title=\"选择数据类型\">\r\n                                <IconButton\r\n                                    // color=\"inherit\"\r\n                                    aria-label=\"open drawer\"\r\n                                    onClick={() => dispatch({ type: OPEN_DRAWER })}\r\n                                    className={classes.menuButton}\r\n                                >\r\n                                    <Menu />\r\n                                </IconButton>\r\n                              </Tooltip>\r\n                      }\r\n\r\n                      <Button\r\n                        // color=\"inherit\"\r\n                      >\r\n                          <Typography component=\"span\"\r\n                          noWrap>\r\n                          OI Wiki 测试用例生成工具\r\n                          </Typography>\r\n                      </Button>\r\n                    </Box>\r\n                    {/* Right half */}\r\n                    <Box>\r\n                        <Tooltip title=\"切换模式\" placement=\"bottom\" arrow>\r\n                          <IconButton onClick={changeMode}>\r\n                            <Palette />\r\n                          </IconButton>\r\n                        </Tooltip>\r\n                        <Tooltip title=\"设置\" placement=\"bottom\" arrow>\r\n                            <IconButton component=\"a\" href=\"/settings\" color=\"inherit\">\r\n                            <Settings />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                        <Tooltip title=\"GitHub仓库\" placement=\"bottom\" arrow>\r\n                            <IconButton component=\"a\" href={OIWikiGithub} color=\"inherit\">\r\n                            <GitHub />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                    </Box>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Header\r\n\r\n// const mapStateToProps = (state, props) => {\r\n//   console.log(\"header\",state.open)\r\n//     return {\r\n//         ...state,\r\n//         open: props.open,\r\n//         dataType: state.dataType\r\n//     }\r\n// }\r\n\r\n// const mapDispatchToProps = (dispatch) => {\r\n//     return {\r\n//         toggleDrawer: () => dispatch(toggleDrawer())\r\n//     }\r\n// }\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(Header);","// General actions\r\nexport const OPEN_DRAWER = \"OPEN_DRAWER\"\r\nexport const CLOSE_DRAWER = \"CLOSE_DRAWER\"\r\nexport const SET_DATATYPE = 'SET_DATATYPE'\r\nexport const SET_OUTPUT = 'SET_OUTPUT'\r\nexport const ALTER_ALL = 'ALTER_ALL'\r\nexport const UPDATE_NUM_CHARS = 'UPDATE_NUM_CHARS'\r\nexport const UPDATE_CHARSET = 'UPDATE_CHARSET'\r\nexport const UPDATE_NUM_CASES = 'UPDATE_NUM_CASES'\r\n\r\n// String\r\nexport const UPDATE_DELIMITER = 'UPDATE_DELIMITER'\r\nexport const UPDATE_ALLOW_DUPLICATE = 'UPDATE_ALLOW_DUPLICATE'\r\n\r\n// Vector\r\nexport const UPDATE_NUM_ELEMENTS = 'UPDATE_NUM_ELEMENTS'\r\nexport const UPDATE_VECTOR_ELEM_TYPE_str = 'UPDATE_VECTOR_ELEM_TYPE_str'\r\nexport const UPDATE_VECTOR_ELEM_TYPE_int = 'UPDATE_VECTOR_ELEM_TYPE_int'\r\nexport const UPDATE_VECTOR_ELEM_TYPE_float = 'UPDATE_VECTOR_ELEM_TYPE_float'\r\nexport const UPDATE_FLOAT_RANGE = 'UPDATE_FLOAT_RANGE'","import React from 'react'\r\nimport { Container, CardContent, List, ListItem, ListItemIcon, ListItemText, Radio,\r\n  FormControl, FormControlLabel, RadioGroup, Card } from '@material-ui/core'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { CLOSE_DRAWER, SET_DATATYPE } from '../Store/Actions/ActionTypes'\r\n\r\nconst useStyles = makeStyles({\r\n  list: {\r\n    width: 250,\r\n    paddingTop: 70,\r\n  },\r\n  title: {\r\n    paddingTop: 70\r\n  }\r\n})\r\n\r\nconst items = [\r\n  {id: 0, type: 'String'},\r\n  {id: 1, type: 'Vector'},\r\n  {id: 2, type: 'Tree(NOT implemented)'},\r\n  {id: 3, type: 'Graph(NOT implemented)'},\r\n]\r\n\r\nconst NavigationBar = () => {\r\n    const open = useSelector(state => state.rootReducer.open)\r\n    const [value, setValue] = React.useState('')\r\n    const dispatch = useDispatch()\r\n    const classes = useStyles()\r\n\r\n    if (open) {\r\n      return (\r\n        <Container\r\n        className={classes.list}\r\n        onClick={()=>dispatch({ type: CLOSE_DRAWER })}\r\n        >\r\n        <Card raised>\r\n          <CardContent>\r\n          <CardContent component={'span'} className={classes.title}>请选择测试用例数据类型：</CardContent>\r\n          <List>\r\n            { items.map((item) => {\r\n                return (\r\n                  <FormControl component='fieldset' key={item.id}>\r\n                    <RadioGroup\r\n                        value={value}\r\n                        onChange={(e)=> {\r\n                            setValue(e.target.value)\r\n                            dispatch({type: SET_DATATYPE, payload: item.type, id: item.id})\r\n                        }}\r\n                    >\r\n                        <ListItem key={item.id}>\r\n                          <ListItemIcon>\r\n                            <FormControlLabel\r\n                              value={item.type}\r\n                              checked={value === item.type}\r\n                              control={<Radio/>}\r\n                              label={item.value}\r\n                            />\r\n                          </ListItemIcon>\r\n                          <ListItemText id={item.id} primary={item.type}/>\r\n                        </ListItem>\r\n                    </RadioGroup>\r\n                  </FormControl>\r\n                )\r\n              }) \r\n            }\r\n          </List>\r\n        </CardContent>\r\n        </Card>\r\n      </Container>\r\n      )\r\n    }\r\n    else {\r\n      return <div/>\r\n    }\r\n    \r\n}\r\n\r\nexport default NavigationBar","import React, {useState} from 'react'\r\nimport { Container, Typography, Box, Grid, CardContent, TextField, FormControl, Radio,\r\n    Switch, FormControlLabel, RadioGroup } from '@material-ui/core'\r\n// import Autocomplete from '@material-ui/lab/Autocomplete'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport { useDispatch } from 'react-redux'\r\nimport { UPDATE_NUM_CASES, UPDATE_NUM_CHARS, UPDATE_CHARSET, UPDATE_DELIMITER, UPDATE_ALLOW_DUPLICATE } from '../../Store/Actions/ActionTypes'\r\n\r\nconst useStyles = makeStyles({\r\n    text: {\r\n      width: 150,\r\n    },\r\n    line: {\r\n        paddingTop: 8,\r\n        paddingBottom: 8,\r\n        paddingLeft: 5\r\n    },\r\n    radiogroup: {\r\n        marginLeft: 15\r\n    }\r\n  })\r\n\r\nconst predefinedCharset = {\r\n    'a-z': 'abcdefghijklmnopqrstuvwxyz',\r\n    'A-Z': 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',\r\n    'a-z&A-Z': 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ',\r\n    '0-9': '0123456789',\r\n}\r\n\r\n// for autocomplete component\r\n// const predefinedCharset = [\r\n//     {description: 'abc', char: 'abc'},\r\n//     {description: 'a-z', char: 'abcdefghijklmnopqrstuvwxyz'},\r\n//     {description: 'A-Z', char: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'},\r\n//     {description: 'a-z and A-Z', char: 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'},\r\n// ]\r\n\r\n// const defaultProps = {\r\n//     options: predefinedCharset,\r\n//     getOptionLabel: (option) => option.description,\r\n// };\r\n\r\n\r\nconst StringInput = () => {\r\n    const classes = useStyles()\r\n    const dispatch = useDispatch();\r\n    const [customCharset, setCustomCharset] = useState(true)\r\n    const [useDelimiter, setUseDelimiter] = useState(false)\r\n    const [value, setValue] = useState('')\r\n    const [allowDuplicate, setAllowDuplicate] = useState(true)\r\n    const [radioDisabled, setRadio] = useState(true)\r\n    \r\n    return (\r\n        <Container>\r\n            <Box>\r\n            <CardContent>STRING</CardContent>\r\n            <Typography component={\"span\"}>\r\n                <Grid container\r\n                    direction=\"row\"\r\n                    spacing={2}\r\n                >\r\n                    <Grid container\r\n                        direction='column'\r\n                        className={classes.line}\r\n                    >\r\n                        <Grid>\r\n                            <CardContent>快速选择/非自定义测试用例字符库：</CardContent>\r\n                        </Grid>\r\n                        <Grid item className={classes.line}>\r\n                            <Grid container className={classes.radiogroup}>\r\n                            <FormControl component='fieldset'>\r\n\r\n                            { !radioDisabled\r\n                            ?\r\n\r\n                                <RadioGroup row\r\n                                    value={value}\r\n                                    onChange={(e)=> {\r\n                                        setValue(e.target.value)\r\n                                        // updateCharset(predefinedCharset[e.target.value])\r\n                                        dispatch({\r\n                                            type: UPDATE_CHARSET,\r\n                                            payload: predefinedCharset[e.target.value]\r\n                                        })\r\n                                    }}\r\n                                >\r\n                                    <FormControlLabel\r\n                                        value='a-z'\r\n                                        checked={value === 'a-z'}\r\n                                        control={<Radio/>}\r\n                                        label='a-z'\r\n                                    />\r\n                                    <FormControlLabel\r\n                                        value='A-Z'\r\n                                        checked={value === 'A-Z'}\r\n                                        control={<Radio/>}\r\n                                        label='A-Z'\r\n                                    />\r\n                                    <FormControlLabel\r\n                                        value='a-z&A-Z'\r\n                                        checked={value === 'a-z&A-Z'}\r\n                                        control={<Radio/>}\r\n                                        label='a-z & A-Z'\r\n                                    />\r\n                                    <FormControlLabel\r\n                                        value='0-9'\r\n                                        checked={value === '0-9'}\r\n                                        control={<Radio/>}\r\n                                        label='0-9'\r\n                                    />\r\n                                </RadioGroup>\r\n\r\n                            :\r\n\r\n                                <RadioGroup row\r\n                                    value={value}\r\n                                    onChange={(e)=> {\r\n                                        setValue(e.target.value)\r\n                                        // updateCharset(predefinedCharset[e.target.value])\r\n                                        dispatch({\r\n                                            type: UPDATE_CHARSET,\r\n                                            payload: predefinedCharset[e.target.value]\r\n                                        })\r\n                                    }}\r\n                                >\r\n                                    <FormControlLabel disabled\r\n                                        value='a-z'\r\n                                        checked={value === 'a-z'}\r\n                                        control={<Radio/>}\r\n                                        label='a-z'\r\n                                    />\r\n                                    <FormControlLabel disabled\r\n                                        value='A-Z'\r\n                                        checked={value === 'A-Z'}\r\n                                        control={<Radio/>}\r\n                                        label='A-Z'\r\n                                    />\r\n                                    <FormControlLabel disabled\r\n                                        value='a-z&A-Z'\r\n                                        checked={value === 'a-z&A-Z'}\r\n                                        control={<Radio/>}\r\n                                        label='a-z & A-Z'\r\n                                    />\r\n                                    <FormControlLabel disabled\r\n                                        value='0-9'\r\n                                        checked={value === '0-9'}\r\n                                        control={<Radio/>}\r\n                                        label='0-9'\r\n                                    />\r\n                                </RadioGroup>\r\n\r\n                            }\r\n\r\n                            </FormControl>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item className={classes.line}>\r\n                            <FormControlLabel\r\n                                control={\r\n                                    <Switch\r\n                                        name=\"need custom charset\"\r\n                                        checked={customCharset}\r\n                                        onChange={()=>{\r\n                                            setCustomCharset(e=>!e)\r\n                                            setRadio(e=>!e)\r\n                                            dispatch({\r\n                                                type: UPDATE_CHARSET,\r\n                                                payload: ''\r\n                                            })\r\n                                        }}\r\n                                    />\r\n                                }\r\n                                label=\"自定义字符库\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item className={classes.line}>\r\n                            { customCharset \r\n                                ? <Grid container direction='row'>\r\n                                    <Grid item className={classes.line}>\r\n                                        <CardContent>请输入自定义字符:</CardContent>\r\n                                    </Grid>\r\n                                    <Grid item className={classes.line}>\r\n                                        <TextField \r\n                                            className={classes.text}\r\n                                            label=''\r\n                                            autoFocus\r\n                                            fullWidth\r\n                                            dense='true'\r\n                                            name='chars'\r\n                                            onChange={(e) => dispatch ({\r\n                                                type: UPDATE_CHARSET,\r\n                                                payload: e.target.value\r\n                                            })}\r\n                                            variant='outlined'\r\n                                        />\r\n                                    </Grid>\r\n                                  </Grid>\r\n                                : <Box/>\r\n                            }\r\n                        </Grid>\r\n                        {/* <Autocomplete\r\n                            className={classes.text}\r\n                            {...defaultProps}\r\n                            autoComplete\r\n                            includeInputInList\r\n                            value={charset}\r\n                            onChange={(e)=>updateCharset(e.target.value)}\r\n                            // https://www.gitmemory.com/issue/mui-org/material-ui/18443/555265265\r\n                            getOptionSelected={(option, { multiple, value }) => {\r\n                                if (!multiple) {\r\n                                    return (option.item.description === value.description);  \r\n                                }\r\n                                return false;\r\n                                }}\r\n                            renderInput={\r\n                                (params) => <TextField {...params} \r\n                                // input={charset}\r\n                                // onChange={(e)=>updateCharset(e.target.value)}\r\n                                                type='text'\r\n                                                label=\"Charset\"\r\n                                                margin=\"normal\"\r\n                                            />}\r\n                        /> */}\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container>\r\n                    <FormControlLabel\r\n                        control={\r\n                            <Switch\r\n                                name=\"allow duplicate chars\"\r\n                                checked={allowDuplicate}\r\n                                onChange={ () => {\r\n                                        setAllowDuplicate((v)=>!v)\r\n                                        dispatch({\r\n                                            type: UPDATE_ALLOW_DUPLICATE,\r\n                                            payload: !allowDuplicate\r\n                                        })\r\n                                    }\r\n                                }\r\n                            />\r\n                        }\r\n                        label=\"允许字符重复\"\r\n                    />\r\n                </Grid>\r\n                <Grid container>\r\n                    <Grid item className={classes.line}>\r\n                        <CardContent>每测试用例字符数量：</CardContent>\r\n                    </Grid>\r\n                    <Grid item className={classes.line}>\r\n                        <TextField \r\n                            className={classes.text}\r\n                            label='Required'\r\n                            fullWidth\r\n                            dense='true'\r\n                            name='delimiter'\r\n                            onChange={(e) => dispatch({\r\n                                type: UPDATE_NUM_CHARS,\r\n                                payload: e.target.value\r\n                            })}\r\n                            variant='outlined'\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container\r\n                    direction='column'\r\n                    spacing={2}\r\n                >\r\n                    <Grid item className={classes.line}>\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Switch\r\n                                    name=\"delimiter checked\"\r\n                                    checked={useDelimiter}\r\n                                    onChange={ () => {\r\n                                        setUseDelimiter((e) => !e)\r\n                                        dispatch({\r\n                                            type: UPDATE_DELIMITER,\r\n                                            payload: ''\r\n                                        })\r\n                                    }}\r\n                                />\r\n                            }\r\n                            label=\"需要设置分隔符\"\r\n                        />\r\n                    </Grid>\r\n\r\n                    { useDelimiter\r\n                        ? <Grid container direction='row'>\r\n                            <Grid item className={classes.line}>\r\n                                <CardContent>请输入分隔符:</CardContent>\r\n                            </Grid>\r\n                            <Grid item className={classes.line}>\r\n                                <TextField \r\n                                        className={classes.text}\r\n                                        label=''\r\n                                        fullWidth\r\n                                        autoFocus\r\n                                        dense='true'\r\n                                        name='delimiter'\r\n                                        onChange={(e) => dispatch({\r\n                                            type: UPDATE_DELIMITER,\r\n                                            payload: e.target.value\r\n                                        })}\r\n                                        variant='outlined'\r\n                                    />\r\n                            </Grid>\r\n                          </Grid>\r\n                        : <Box/>\r\n                    }\r\n                <Grid container>\r\n                    <Grid item className={classes.line}>\r\n                        <CardContent>测试用例总数量：</CardContent>\r\n                    </Grid>\r\n                    <Grid item className={classes.line}>\r\n                        <TextField \r\n                            className={classes.text}\r\n                            label='Required'\r\n                            fullWidth\r\n                            dense='true'\r\n                            name='delimiter'\r\n                            // onChange={(e)=>updateNumCases(e.target.value)}\r\n                            onChange={(e) => dispatch({\r\n                                type: UPDATE_NUM_CASES,\r\n                                payload: e.target.value\r\n                            })}\r\n                            variant='outlined'\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n                </Grid>\r\n\r\n            </Typography>\r\n            </Box>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default StringInput","import React, {useState} from 'react'\r\nimport { Container, Typography, Grid, Box, CardContent, Checkbox, FormGroup,\r\n    FormControlLabel, Switch, TextField, Radio, RadioGroup } from '@material-ui/core'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { UPDATE_VECTOR_ELEM_TYPE_str, UPDATE_VECTOR_ELEM_TYPE_int, UPDATE_VECTOR_ELEM_TYPE_float,\r\n    UPDATE_ALLOW_DUPLICATE, UPDATE_NUM_CHARS, UPDATE_NUM_CASES, UPDATE_NUM_ELEMENTS, UPDATE_CHARSET,\r\n    UPDATE_FLOAT_RANGE } from '../../Store/Actions/ActionTypes'\r\nimport { indigo } from '@material-ui/core/colors'\r\n\r\nconst useStyles = makeStyles({\r\n    text: {\r\n      width: 200,\r\n      height: 10,\r\n      marginBottom: 30\r\n    },\r\n    line: {\r\n        paddingTop: 10,\r\n        paddingBottom: 10\r\n    },\r\n    charSettingBox: {\r\n        marginLeft: 15,\r\n        marginTop: 15,\r\n        marginBottom: 15,\r\n        paddingLeft: 10,\r\n        paddingTop: 10,\r\n        paddingBottom: 10,\r\n        backgroundColor: indigo[50],\r\n    }\r\n  })\r\n\r\nconst VectorInput = () => {\r\n    const classes = useStyles()\r\n    const dispatch = useDispatch()\r\n    const typeChecked = useSelector(state => state.VectorReducer.typeChecked)\r\n    const [stringChecked, setStringChecked] = useState(false)\r\n    const [intChecked, setIntChecked] = useState(false)\r\n    const [floatChecked, setFloatChecked] = useState(false)\r\n    // const [VectorChecked, setVectorChecked] = useState(false) // TODO\r\n    const [allowDuplicate, setAllowDuplicate] = useState(true)\r\n    const [charValue, setCharValue] = useState('')\r\n    const [error, setError] = useState(false)\r\n    const [helperText, setHelperText] = useState('')\r\n\r\n    const charsetOptions = [\r\n        {\r\n            label: 'a-z',\r\n            value: 'abcdefghijklmnopqrstuvwxyz',\r\n            optionDisabled: !stringChecked\r\n        },\r\n        {\r\n            label: 'A-Z',\r\n            value: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',\r\n            optionDisabled: !stringChecked\r\n        },\r\n        {\r\n            label: 'a-z & A-Z',\r\n            value: 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ',\r\n            optionDisabled: !stringChecked\r\n        },\r\n        {\r\n            label: '0-9',\r\n            value: '0123456789',\r\n            optionDisabled: !intChecked\r\n        },\r\n        {\r\n            label: 'a-z & A-Z & 0-9',\r\n            value: 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789',\r\n            optionDisabled: !(intChecked && stringChecked)\r\n        }\r\n    ]\r\n\r\n    const checkValidRange = (text) => {\r\n        // CLEAR ERROR STATE\r\n        setError(false)\r\n        setHelperText('')\r\n\r\n        text = text.trim()\r\n        let lowerBound = parseFloat(text.split('-')[0])\r\n        let upperBound = parseFloat(text.split('-')[1])\r\n        // CHECK '-'\r\n        if (text.split('-')[2]) {\r\n            setError(true)\r\n            setHelperText(\"只能包含一个'-'\")\r\n            return false\r\n        }\r\n        // CHECK BOUNDS\r\n        let re = /[0-9]/\r\n        if ((!lowerBound || !upperBound) && (!re.test(lowerBound) || !re.test(upperBound))) {\r\n            setError(true)\r\n            setHelperText(\"只能包含数字和'-'\")\r\n            return false\r\n        }\r\n        // CHECK VALUE\r\n        if (lowerBound > upperBound) {\r\n            setError(true)\r\n            setHelperText(\"下限高于上限\")\r\n            return false\r\n        }\r\n        console.log(\"AFTER: \"+helperText)\r\n        return true;\r\n    }\r\n    \r\n    return (\r\n        <Container>\r\n            <Box>\r\n            <CardContent>VECTOR</CardContent>\r\n            <Typography component={\"span\"}>\r\n                <Grid container\r\n                    direction=\"column\"\r\n                    className={classes.line}\r\n                    alignItems='flex-start'\r\n                >\r\n                    <Grid item>\r\n                        <CardContent>元素数据类型(可多选):</CardContent>\r\n                        <FormGroup row>\r\n                            <FormControlLabel\r\n                                label=\"String\"\r\n                                control={\r\n                                    <Checkbox\r\n                                        checked={stringChecked}\r\n                                        color=\"primary\"\r\n                                        onChange={() => {\r\n                                            setStringChecked(e=>!e)\r\n                                            dispatch({ \r\n                                                type: UPDATE_VECTOR_ELEM_TYPE_str,\r\n                                                payload: !stringChecked\r\n                                            })\r\n                                        }}\r\n                                    />\r\n                                }\r\n                            />\r\n                            <FormControlLabel\r\n                                label=\"Int\"\r\n                                control={\r\n                                    <Checkbox\r\n                                        checked={intChecked}\r\n                                        color=\"primary\"\r\n                                        onChange={() => {\r\n                                            setIntChecked(e=>!e)\r\n                                            dispatch({ \r\n                                                type: UPDATE_VECTOR_ELEM_TYPE_int,\r\n                                                payload: !typeChecked.int\r\n                                            })\r\n                                        }}\r\n                                    />\r\n                                }\r\n                            />\r\n                            <FormControlLabel\r\n                                label=\"Float\"\r\n                                control={\r\n                                    <Checkbox\r\n                                        checked={floatChecked}\r\n                                        color=\"primary\"\r\n                                        onChange={() => {\r\n                                            setFloatChecked(e=>!e)\r\n                                            dispatch({ \r\n                                                type: UPDATE_VECTOR_ELEM_TYPE_float,\r\n                                                payload: !typeChecked.float\r\n                                            })\r\n                                        }}\r\n                                    />\r\n                                }\r\n                            />\r\n                        </FormGroup>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Grid container className={classes.charSettingBox}>\r\n\r\n                            设置Vector每元素所含字符：\r\n\r\n                            <RadioGroup row\r\n                                value={charValue}\r\n                                onChange={(e)=> {\r\n                                    setCharValue(e.target.value)\r\n                                    dispatch({\r\n                                        type: UPDATE_CHARSET,\r\n                                        payload: e.target.value\r\n                                    })\r\n                                }}\r\n                            >\r\n                                { charsetOptions.map ((option) => {\r\n                                    return (\r\n                                        // 'key' doesn't serve any purpose here, just to make the erorr goes away\r\n                                        <FormControlLabel key={option.label}\r\n                                            label={option.label}\r\n                                            value={option.value}\r\n                                            checked={option.value === charValue}\r\n                                            control={<Radio/>}\r\n                                            disabled={option.optionDisabled}\r\n                                        />\r\n                                    )\r\n                                })}\r\n                                <Grid container \r\n                                    direction='row'\r\n                                    alignItems='flex-end'\r\n                                >\r\n                                    <Grid item>\r\n                                        浮点范围：\r\n                                    </Grid>\r\n                                    <Grid item>\r\n                                        <TextField\r\n                                            className={classes.text}\r\n                                            label='例: 0-1'\r\n                                            name='float_range'\r\n                                            margin='dense'\r\n                                            disabled={!floatChecked}\r\n                                            onChange={(e) => {\r\n                                                if (checkValidRange(e.target.value))\r\n                                                    dispatch({\r\n                                                    type: UPDATE_FLOAT_RANGE,\r\n                                                    payload: e.target.value\r\n                                                    })\r\n                                            }}\r\n                                            error={error}\r\n                                            helperText={helperText}\r\n                                        />\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </RadioGroup>\r\n\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Switch\r\n                                    name=\"allow duplicate chars\"\r\n                                    checked={allowDuplicate}\r\n                                    onChange={ () => {\r\n                                            setAllowDuplicate((v)=>!v)\r\n                                            dispatch({\r\n                                                type: UPDATE_ALLOW_DUPLICATE,\r\n                                                payload: !allowDuplicate\r\n                                            })\r\n                                        }\r\n                                    }\r\n                                />\r\n                            }\r\n                            label=\"允许字符重复\"\r\n                        />\r\n                    </Grid>\r\n\r\n                    { !floatChecked\r\n                      ?\r\n                        <Grid item>\r\n                            <Grid container>\r\n                                <Grid item className={classes.line}>\r\n                                    <CardContent>每个Vector元素所含字符数量：</CardContent>\r\n                                </Grid>\r\n                                <Grid item className={classes.line}>\r\n                                    <TextField \r\n                                        className={classes.text}\r\n                                        label='Required'\r\n                                        fullWidth\r\n                                        dense='true'\r\n                                        name='delimiter'\r\n                                        onChange={(e) => dispatch({\r\n                                            type: UPDATE_NUM_CHARS,\r\n                                            payload: e.target.value\r\n                                        })}\r\n                                        variant='outlined'\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                        :\r\n\r\n                        <div/>\r\n                    }\r\n\r\n                    <Grid item>\r\n                        <Grid container>\r\n                            <Grid item className={classes.line}>\r\n                                <CardContent>每个Vector测试用例所含元素数量：</CardContent>\r\n                            </Grid>\r\n                            <Grid item className={classes.line}>\r\n                                <TextField \r\n                                    className={classes.text}\r\n                                    label='Required'\r\n                                    fullWidth\r\n                                    dense='true'\r\n                                    name='delimiter'\r\n                                    onChange={(e) => dispatch({\r\n                                        type: UPDATE_NUM_ELEMENTS,\r\n                                        payload: e.target.value\r\n                                    })}\r\n                                    variant='outlined'\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Grid container>\r\n                            <Grid item className={classes.line}>\r\n                                <CardContent>测试用例Vector总数量：</CardContent>\r\n                            </Grid>\r\n                            <Grid item className={classes.line}>\r\n                                <TextField \r\n                                    className={classes.text}\r\n                                    label='Required'\r\n                                    fullWidth\r\n                                    dense='true'\r\n                                    name='delimiter'\r\n                                    onChange={(e) => dispatch({\r\n                                        type: UPDATE_NUM_CASES,\r\n                                        payload: e.target.value\r\n                                    })}\r\n                                    variant='outlined'\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Typography>\r\n            </Box>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default VectorInput","import React from 'react'\r\nimport { Container, Typography, Card, Box } from '@material-ui/core'\r\n\r\nconst TreeInput = () => {\r\n    return (\r\n        <Container>\r\n            <Box>\r\n            <Typography component={\"span\"}>\r\n            <Card>\r\n                Tree input area\r\n            </Card>\r\n            </Typography>\r\n            </Box>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default TreeInput","import React from 'react'\r\nimport { Container, Typography, Card, Box } from '@material-ui/core'\r\n\r\nconst GraphInput = () => {\r\n    return (\r\n        <Container>\r\n            <Box>\r\n            <Typography component={\"span\"}>\r\n            <Card>\r\n                Graph input area\r\n            </Card>\r\n            </Typography>\r\n            </Box>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default GraphInput","import React from 'react'\r\nimport { Container, Grid, Card, CardContent } from '@material-ui/core'\r\n// import { Container, Grid, Card, CardContent, SvgIcon } from '@material-ui/core'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport { useSelector } from 'react-redux'\r\nimport String from './InputAreaByDataTypes/StringInput'\r\nimport Vector from './InputAreaByDataTypes/VectorInput'\r\nimport Tree from './InputAreaByDataTypes/TreeInput'\r\nimport Graph from './InputAreaByDataTypes/GraphInput'\r\n// import { mdiArrowTopLeftThick } from '@mdi/js'\r\n\r\nconst useStyles = makeStyles({\r\n  inputBox: {\r\n    marginTop: 80,\r\n  },\r\n  card: {\r\n    paddingTop: 15,\r\n    paddingRight: 10,\r\n    paddingBottom: 10,\r\n    minWidth: 200,\r\n    minHeight: 400\r\n  }\r\n})\r\n\r\nconst InputArea = () => {\r\n    const classes = useStyles()\r\n    const dataType = useSelector(state => state.rootReducer.dataType)\r\n    const renderInputAreaByType = (type) => {\r\n      console.log(\"current data type\", type)\r\n        if (type === 'String')\r\n          return <String/>\r\n        else if (type === 'Vector')\r\n          return <Vector/>\r\n        else if (type === 'Tree')\r\n          return <Tree/>\r\n        else if (type === 'Graph')\r\n          return <Graph/>\r\n        else\r\n          return (\r\n            <Container>\r\n              {/* <SvgIcon path={mdiArrowTopLeftThick} /> */}\r\n              <CardContent>\r\n                  请先选择测试用例的数据类型\r\n              </CardContent>\r\n            </Container>\r\n          )\r\n    }\r\n\r\n    return(\r\n        <Container fixed \r\n            className={classes.inputBox}\r\n            disableGutters={true}\r\n        >\r\n          <Grid container\r\n                direction='column'\r\n                spacing={2}\r\n          >\r\n            <Card raised component={'span'}\r\n              className={classes.card}\r\n            >\r\n\r\n                {renderInputAreaByType(dataType)}\r\n\r\n            </Card>\r\n          </Grid>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default InputArea","import React from 'react'\r\nimport { Container, Card, CardContent, Grid, TextField, Button } from '@material-ui/core'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport { useSelector } from 'react-redux'\r\nimport { grey } from '@material-ui/core/colors'\r\nimport { useSnackbar } from 'notistack'\r\n\r\nconst useStyles = makeStyles({\r\n  outputBox: {\r\n    marginTop: 30,\r\n  },\r\n  card: {\r\n    marginLeft: 20,\r\n    paddingBottom: 20,\r\n    minWidth: 200,\r\n    minHeight: 300\r\n  },\r\n  button: {\r\n    marginTop: 100,\r\n    marginBottom: 20,\r\n    marginLeft: 80,\r\n    background: grey[300],\r\n    minWidth: 80\r\n  }\r\n})\r\n\r\nconst OutputArea = () => {\r\n    const classes = useStyles()\r\n    const { enqueueSnackbar } = useSnackbar();\r\n    const output = useSelector(state => state.rootReducer.output)\r\n\r\n    const copy2clipboard = (variant) => {\r\n        console.log('CLIPBOARD')\r\n        navigator.clipboard.writeText(output)\r\n        enqueueSnackbar('已复制到剪贴板', { variant })\r\n    }\r\n    \r\n    return(\r\n        <Container fixed\r\n            className={classes.outputBox}\r\n        >\r\n            <Grid container\r\n                  direction='column'\r\n                  spacing={2}\r\n            >\r\n                <Card raised \r\n                    component={'span'}\r\n                    className={classes.card}\r\n                >\r\n\r\n                { output === ''\r\n                  ?\r\n                    <Container>\r\n                        <CardContent>\r\n                            测试用例输出：\r\n                        </CardContent>\r\n                        <CardContent>\r\n                            请选择测试用例的数据类型\r\n                        </CardContent>\r\n                    </Container>\r\n                  :\r\n\r\n                    <Container>\r\n                        <CardContent>\r\n                            测试用例输出：\r\n                        </CardContent>\r\n                        <CardContent>\r\n                            滑动滑块查看完整测试用例 支持手动修改数据\r\n                        </CardContent>\r\n                        <TextField\r\n                            label=\"\"\r\n                            multiline\r\n                            rows={8}\r\n                            value={output}\r\n                            variant=\"filled\"\r\n                        />\r\n                        <Button\r\n                            className={classes.button}\r\n                            onClick={() => copy2clipboard('success')}\r\n                        >\r\n                            复制到剪贴板\r\n                        </Button>\r\n                    </Container>\r\n                }\r\n\r\n                </Card>\r\n            </Grid>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default OutputArea","import React from 'react'\r\nimport { Container, Typography, CardContent } from '@material-ui/core'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Favorite from '@material-ui/icons/Favorite'\r\nimport red from '@material-ui/core/colors/red'\r\n\r\nconst useStyles = makeStyles( (theme) => ({\r\n    content: {\r\n        color: theme.palette.footer.text\r\n    },\r\n    position: {\r\n        marginTop: 50\r\n    }\r\n}));\r\n\r\nconst Footer = () => {\r\n    const classes = useStyles()\r\n    return(\r\n        <Container className={classes.position}>\r\n            <Typography className={classes.content} component={\"span\"}>\r\n                <CardContent>\r\n                    Test Case Generator by OI Wiki, made with\r\n                    <Favorite style={{ color: red.A400 }} />\r\n                </CardContent>\r\n            </Typography>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Footer;","import { SET_OUTPUT } from './ActionTypes'\r\n\r\nconst genStringInt = (arr) => {\r\n    console.log('String or Int')\r\n    let rtn = arr[Math.floor(Math.random() * arr.length)]\r\n    return rtn\r\n}\r\n\r\nconst genFloat = (floatRange) => {\r\n    console.log('Float')\r\n    let lowerBound = parseFloat(floatRange.trim().split('-')[0])\r\n    let upperBound = parseFloat(floatRange.trim().split('-')[1])\r\n    return Math.random() * upperBound + lowerBound\r\n}\r\n\r\nexport const startVectorGen = (state, dispatch) => {\r\n\r\n    console.log(\"STRING GEN ACTIONS\")\r\n    const { chars, numChars, numCases,  output } = state.rootReducer\r\n    const { numElem, floatRange } = state.VectorReducer\r\n    const { string, int, float } = state.VectorReducer.typeChecked\r\n\r\n    if (output !== '')\r\n        console.log('RECALCULATE')\r\n\r\n    let result = ''\r\n    let arr = chars.split('')\r\n\r\n    for (let i = 0; i < numCases; ++i) {\r\n        if (i === 0)\r\n            result += '['\r\n        else\r\n            result += '],['\r\n        for (let j = 0; j < numElem; ++j) {\r\n            if (j !== 0)\r\n                result += ','\r\n            if (float && !string && !int) {\r\n                result += genFloat(floatRange)\r\n            }\r\n            else {\r\n                for (let l = 0; l < numChars; ++l) {\r\n                    if ((string || int) && !float) {\r\n                        result += genStringInt(arr)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (i === numCases-1)\r\n            result += ']'\r\n    }\r\n\r\n    console.log('RESULT=',result)\r\n    dispatch({\r\n        type: SET_OUTPUT,\r\n        payload: result\r\n    })\r\n}","import React from 'react'\r\nimport { Container, Grid, Button } from '@material-ui/core'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport { grey } from '@material-ui/core/colors'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { startStringGen, startVectorGen } from '../Store/Actions'\r\nimport { ALTER_ALL } from '../Store/Actions/ActionTypes'\r\n\r\nconst useStyles = makeStyles({\r\n  button: {\r\n    marginTop: 100,\r\n    marginBottom: 20,\r\n    marginLeft: 80,\r\n    background: grey[300],\r\n    minWidth: 80\r\n  }\r\n})\r\n\r\nconst ButtonUtil = () => {\r\n    const classes = useStyles()\r\n    const dispatch = useDispatch()\r\n    const dataType = useSelector(state => state.rootReducer.dataType)\r\n    const allState = useSelector(state => state)\r\n\r\n    const StartGenerator = () => {\r\n        console.log('---------------GEN START')\r\n            switch (dataType) {\r\n                case 'String': \r\n                    startStringGen(allState, dispatch)\r\n                    break\r\n                case 'Vector':\r\n                    startVectorGen(allState, dispatch)\r\n                    break\r\n                default:\r\n                    console.log('Please select data type')\r\n            }\r\n          console.log('---------------GEN END')\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <Grid container\r\n            direction='row'\r\n            spacing={3}\r\n            >\r\n            <Grid item xs={3} sm={3}>\r\n                <Button className={classes.button}\r\n                    onClick={() => StartGenerator()}\r\n                >\r\n                    提交\r\n                </Button>\r\n            </Grid>\r\n            <Grid item xs={3} sm={3}>\r\n                <Button className={classes.button}\r\n                    onClick={() => dispatch({ type: ALTER_ALL })}\r\n                >\r\n                    全部清除\r\n                </Button>\r\n            </Grid>\r\n            </Grid>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default ButtonUtil","import { SET_OUTPUT } from './ActionTypes'\r\n\r\nexport const startStringGen = (state, dispatch) => {\r\n    console.log(\"STRING GEN ACTIONS\")\r\n    const { chars, numChars, delimiter, numCases, allowDuplicate, output } = state.rootReducer\r\n    if (output !== '') {\r\n        console.log('ERROR: output not empty, submit clicked more than once')\r\n    }\r\n    let result = ''\r\n    let arr = chars.split('')\r\n    if (allowDuplicate) {\r\n        console.log('dup ALLOWED')\r\n        if (delimiter === '') {\r\n            console.log('WITHOUT delimiter')\r\n            for (let i = 0; i < numCases; ++i) {\r\n                for (let j = 0; j < numChars; ++j) {\r\n                    result += arr[Math.floor(Math.random() * arr.length)]\r\n                }\r\n                result += '\\n'\r\n            }\r\n        }\r\n        else {\r\n            console.log('WITH delimiter')\r\n            for (let i = 0; i < numCases; ++i) {\r\n                for (let j = 0; j < numChars; ++j) {\r\n                    result += arr[Math.floor(Math.random() * arr.length)]\r\n                }\r\n                if (i !== numCases-1)\r\n                    result += delimiter\r\n            }\r\n        }\r\n\r\n    }\r\n    else {\r\n        console.log('dup NOT ALLOWED')\r\n        let count = Math.min(arr.length, numCases*numChars)\r\n        if (delimiter === '') {\r\n            console.log('WITHOUT delimiter')\r\n            while (count > 0 && arr.length > 0) {\r\n                for (let i = 0; i < numChars; ++i) {\r\n                    if (count <= 0)\r\n                        break\r\n                    let idx = Math.floor(Math.random() * count--)\r\n                    result += arr[idx]\r\n                    arr.splice(idx, 1)\r\n                }\r\n                result += '\\n'\r\n            }\r\n        }\r\n        else {\r\n            console.log('WITH delimiter')\r\n            while (count > 0 && arr.length > 0) {\r\n                for (let i = 0; i < numChars; ++i) {\r\n                    if (count <= 0)\r\n                        break\r\n                    let idx = Math.floor(Math.random() * count--)\r\n                    result += arr[idx]\r\n                    arr.splice(idx, 1)\r\n                }\r\n                if (count > 0)\r\n                    result += delimiter\r\n            }\r\n        }\r\n    }\r\n    // console.log('RESULT=',result)\r\n    dispatch({\r\n        type: SET_OUTPUT,\r\n        payload: result\r\n    })\r\n}","import React from 'react'\r\nimport { Container, Typography, Grid } from '@material-ui/core'\r\nimport Header from './Components/Header'\r\nimport NavBar from './Components/NavigationBar'\r\nimport InputArea from './Components/InputArea'\r\nimport OutputArea from './Components/OutputArea'\r\nimport Footer from './Components/Footer'\r\nimport ButtonUtil from './Components/ButtonUtil'\r\nimport { SnackbarProvider } from 'notistack'\r\n\r\nconst App = () => {\r\n  return (\r\n    <Container>\r\n        <Typography component={\"span\"}>\r\n            <Header />\r\n        </Typography>\r\n        <Typography component={\"span\"}>\r\n            <Grid container\r\n              direction=\"row\"\r\n            >\r\n                <Grid item><NavBar/></Grid>\r\n                <Grid item xs={12} sm={6}><InputArea/></Grid>\r\n                <Grid item xs={12} sm={6}>\r\n                    <Grid container\r\n                        direction='column'\r\n                    >\r\n                        <Grid item>\r\n                            <ButtonUtil />\r\n                        </Grid>\r\n\r\n                        <Grid item>\r\n                            <SnackbarProvider maxSnack={2}>\r\n                                <OutputArea />\r\n                            </SnackbarProvider>\r\n                        </Grid>\r\n\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </Typography>\r\n        <Typography component={\"span\"}>\r\n            <Footer />\r\n        </Typography>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { createMuiTheme } from '@material-ui/core'\r\nimport blue from '@material-ui/core/colors/blue'\r\nimport grey from '@material-ui/core/colors/grey'\r\nimport { withStyles } from '@material-ui/core/styles'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const globalStyles = withStyles((theme) => ({\r\n  '@global': {\r\n    a: {\r\n      color: theme.palette.primary.main,\r\n      textDecoration: 'none',\r\n      '&:hover': {\r\n        textDecoration: 'none',\r\n      },\r\n    },\r\n    blockquote: {\r\n      paddingLeft: '1em',\r\n      margin: '1em 3em 1em 2em',\r\n      borderLeft: `4px solid ${theme.palette.blockquote}`,\r\n    },\r\n    code: {\r\n      padding: '2px 4px',\r\n      'border-radius': '2px',\r\n      'font-size': '90%',\r\n      color: theme.palette.inlineCode.color,\r\n      backgroundColor: theme.palette.inlineCode.background,\r\n    },\r\n    'pre code': {\r\n      'font-size': '100%',\r\n      padding: '0.2em 0',\r\n      backgroundColor: '#1E1E1E',\r\n    },\r\n    img: {\r\n      maxWidth: '100%',\r\n    },\r\n  },\r\n}))\r\n\r\nfunction CustomCssEl () {\r\n  return null\r\n}\r\n\r\nCustomCssEl.propTypes = { classes: PropTypes.object.isRequired }\r\n\r\nexport const CustomCssBaseline = globalStyles(CustomCssEl)\r\n\r\nexport const lightTheme = createMuiTheme({\r\n  palette: {\r\n    type: 'light',\r\n    footer: {\r\n      background: grey[200],\r\n      text: grey[700],\r\n    },\r\n    details: {\r\n      border: blue[500],\r\n      main: blue[50],\r\n    },\r\n    blockquote: 'rgba(0,0,0,.12)',\r\n    inlineCode: {\r\n      color: '#37474f',\r\n      background: 'hsla(0,0%,85%,.5)',\r\n    },\r\n    search: {\r\n      messageBackground: grey[100],\r\n      highlight: '#174d8c',\r\n    },\r\n    tab: {\r\n      colorOnHover: '#000',\r\n    },\r\n    subTitle: 'rgba(0,0,0,.7)',\r\n  },\r\n})\r\n\r\nexport const darkTheme = createMuiTheme({\r\n  overrides: {\r\n    MuiCssBaseline: {\r\n      '@global': {\r\n        img: {\r\n          filter: 'brightness(0.8) contrast(1.2)',\r\n          transition: 'filter 0.2s',\r\n          transitionTimingFunction: 'ease',\r\n          '&:hover': {\r\n            filter: 'brightness(1) contrast(1)',\r\n          },\r\n        },\r\n      },\r\n    },\r\n  },\r\n  palette: {\r\n    type: 'dark',\r\n    footer: {\r\n      background: grey[900],\r\n      text: grey[300],\r\n    },\r\n    details: {\r\n      border: blue[500],\r\n      main: grey[700],\r\n    },\r\n    blockquote: 'rgba(255,255,255,.12)',\r\n    inlineCode: {\r\n      color: '#37474f',\r\n      background: 'hsla(0,0%,60%,.5)',\r\n    },\r\n    search: {\r\n      messageBackground: grey[700],\r\n      highlight: '#acccf1',\r\n    },\r\n    tab: {\r\n      colorOnHover: '#fff',\r\n    },\r\n    subTitle: 'rgba(255,255,255,.7)',\r\n  },\r\n})\r\n\r\nexport default lightTheme","// logger middleware is implemented for debug purposes only\r\n\r\nconst logger = store => next => action => {\r\n    console.group(action.type)\r\n    console.info('DISPATCHING', action.type)\r\n    let result = next(action)\r\n    console.log('NEXT STATE', store.getState())\r\n    console.groupEnd()\r\n    return result\r\n  }\r\n  \r\nexport default logger","\r\nconst initState = {\r\n\r\n}\r\n\r\nconst StringReducer = (state = initState, action) => {\r\n    return state;\r\n}\r\n\r\nexport default StringReducer","import { UPDATE_VECTOR_ELEM_TYPE_str, UPDATE_VECTOR_ELEM_TYPE_int, \r\n    UPDATE_VECTOR_ELEM_TYPE_float, ALTER_ALL, UPDATE_NUM_ELEMENTS,\r\n    UPDATE_FLOAT_RANGE } from \"../Actions/ActionTypes\";\r\n\r\nconst initState = {\r\n    numElem: 0,\r\n    typeChecked: {\r\n        string: false,\r\n        int: false,\r\n        float: false,\r\n        vector: false, // TODO\r\n    },\r\n    floatRange: ''\r\n}\r\n\r\nconst VectorReducer = (state=initState, action) => {\r\n    switch(action.type) {\r\n        case UPDATE_NUM_ELEMENTS:\r\n            return {\r\n                ...state,\r\n                numElem: action.payload\r\n            }\r\n        case UPDATE_VECTOR_ELEM_TYPE_str:\r\n            return {\r\n                ...state,\r\n                typeChecked: {\r\n                    ...state.typeChecked,\r\n                    string: action.payload\r\n                }\r\n            }\r\n        case UPDATE_VECTOR_ELEM_TYPE_int:\r\n            return {\r\n                ...state,\r\n                typeChecked: {\r\n                    ...state.typeChecked,\r\n                    int: action.payload\r\n                }\r\n            }\r\n        case UPDATE_VECTOR_ELEM_TYPE_float:\r\n            return {\r\n                ...state,\r\n                typeChecked: {\r\n                    ...state.typeChecked,\r\n                    float: action.payload\r\n                }\r\n            }\r\n        case UPDATE_FLOAT_RANGE:\r\n            return {\r\n                ...state,\r\n                floatRange: action.payload\r\n            }\r\n        case ALTER_ALL:\r\n            return {\r\n                ...state,\r\n                typeChecked: {\r\n                    ...state.typeChecked,\r\n                    string: false,\r\n                    int: false,\r\n                    float: false,\r\n                    vector: false,\r\n                }\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default VectorReducer","import { combineReducers } from 'redux'\r\nimport StringReducer from './StringReducer'\r\nimport VectorReducer from './VectorReducer'\r\nimport { OPEN_DRAWER, CLOSE_DRAWER, UPDATE_CHARSET, UPDATE_DELIMITER, UPDATE_NUM_CHARS, \r\n    SET_DATATYPE, UPDATE_NUM_CASES, SET_OUTPUT, UPDATE_ALLOW_DUPLICATE, ALTER_ALL } from '../Actions/ActionTypes'\r\n    \r\nconst initState = {\r\n    open: false,\r\n    dataType: '',\r\n    chars: '',\r\n    numChars: 0,\r\n    delimiter: '',\r\n    numCases: 0,\r\n    allowDuplicate: true,\r\n    output: ''\r\n}\r\n\r\nconst rootReducer = (state=initState, action) => {\r\n    switch (action.type) {\r\n        case OPEN_DRAWER:\r\n            return {\r\n                ...state,\r\n                open: true\r\n            }\r\n        case CLOSE_DRAWER:\r\n            return {\r\n                ...state,\r\n                open: false\r\n            }\r\n        case SET_DATATYPE:\r\n            return {\r\n                ...state,\r\n                dataType: action.payload\r\n            }\r\n        case UPDATE_CHARSET:\r\n            return {\r\n                ...state,\r\n                chars: action.payload\r\n            }\r\n        case UPDATE_NUM_CHARS:\r\n            return {\r\n                ...state,\r\n                numChars: action.payload\r\n            }\r\n        case UPDATE_DELIMITER:\r\n            return {\r\n                ...state,\r\n                delimiter: action.payload\r\n            }\r\n        case UPDATE_NUM_CASES:\r\n            return {\r\n                ...state,\r\n                numCases: action.payload\r\n            }\r\n        case SET_OUTPUT:\r\n            return {\r\n                ...state,\r\n                output: action.payload\r\n            }\r\n        case UPDATE_ALLOW_DUPLICATE:\r\n            return {\r\n                ...state,\r\n                allowDuplicate: action.payload\r\n            }\r\n        case ALTER_ALL:\r\n            return {\r\n                ...state,\r\n                open: false,\r\n                dataType: '',\r\n                chars: '',\r\n                numChars: 0,\r\n                delimiter: '',\r\n                numCases: 0,\r\n                allowDuplicate: true,\r\n                output: ''\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default combineReducers({\r\n    rootReducer,\r\n    StringReducer,\r\n    VectorReducer,\r\n})","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from 'react-redux'\r\nimport { MuiThemeProvider } from '@material-ui/core'\r\nimport theme from './Theme'\r\nimport { CustomCssBaseline } from './Theme'\r\nimport { createStore, applyMiddleware, compose } from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport loggerMiddleware from './Middleware/Logger'\r\nimport rootReducer from './Store/Reducers'\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(rootReducer, \r\n  composeEnhancers(\r\n    applyMiddleware(loggerMiddleware, thunkMiddleware))\r\n);\r\n\r\nconsole.log(\"INITIAL STATE: \", store.getState())\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <MuiThemeProvider theme={theme}>\r\n      <CustomCssBaseline />\r\n      <App />\r\n    </MuiThemeProvider>\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\nconst unsubscribe = store.subscribe(() => {\r\n  console.log(store.getState())\r\n})\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\nunsubscribe()"],"sourceRoot":""}